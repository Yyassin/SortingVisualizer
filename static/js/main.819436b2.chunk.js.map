{"version":3,"sources":["components/styles.ts","components/NavItems.tsx","components/Burger.tsx","components/NavBar.tsx","components/Footer.tsx","utils/algoUtils.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","algorithms/selectionSort.ts","algorithms/quickSort.ts","algorithms/mergeSort.ts","algorithms/heapSort.ts","utils/animationUtils.ts","components/SortingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledBurger","styled","div","open","Button","button","NavBarStyled","Ul","ul","FooterStyled","VisualizerStyled","NavItems","handleChange","className","onClick","Burger","useState","setOpen","useEffect","document","addEventListener","e","clickListener","removeEventListener","target","classList","contains","NavBar","props","algorithm","setAlgorithm","Typography","id","gutterBottom","Slider","value","numBlocks","aria-label","onChange","event","newValue","handleNumChange","disabled","running","min","max","animationSpeed","track","scale","x","handleSpeedChange","resetArray","sort","charAt","toLowerCase","key","Footer","href","rel","icon","swap","arr","a","b","bubbleSort","animations","finalSorted","sorted","round","length","i","push","j","insertionSort","selectionSort","quickSort","low","high","pivot","pivotVal","pivotIdx","partition","mergeSort","aux","mid","Math","floor","k","finalMerge","merge","heapify","n","largest","left","right","heapSort","temp","animationsHelper","array","bubbleSortHelper","insertionSortHelper","selectionSortHelper","quickSortHelper","mergeSortHelper","heapSortHelper","SortingVisualizer","componentDidMount","clearAllTimeouts","windowObject","setTimeout","clearTimeout","height","isMobile","isTablet","state","random","setState","window","reset","arrayBars","getElementsByClassName","delay","barStyle","style","backgroundColor","asyncResetColor","sortAnim","includes","colorChangeHelper","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","color2","colorHelper","newHeight","newHeight1","newHeight2","bind","innerWidth","this","width","map","index","React","Component","library","add","fab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.819436b2.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport { NavPropsSchema } from '../utils/types'\r\n\r\nexport const StyledBurger = styled.div<NavPropsSchema> `\r\n    width: 2rem;\r\n    height: 2rem;\r\n    position: fixed;\r\n    top: 15px;\r\n    right: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-flow: column nowrap;\r\n    z-index: 20;\r\n\r\n    div {\r\n        width: 2rem;\r\n        height: 0.25rem;\r\n        background-color: ${({ open }) => open ? '#ccc' : '#333'};\r\n        border-radius: 10px;\r\n        transform-origin: 1px;\r\n        transition: all 0.15s linear;\r\n        display: none;\r\n\r\n        @media (max-width: 980px) {\r\n            display: flex;\r\n        }\r\n\r\n        &:nth-child(1) {\r\n            transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\r\n        }\r\n\r\n        &:nth-child(2) {\r\n            transform: ${({ open }) => open ? 'translateX(100%)' : 'translateX(0)'};\r\n            opacity: ${({ open }) => open ? 0 : 1}\r\n        }\r\n\r\n        &:nth-child(3) {\r\n            transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    font-size: 15px;\r\n    background-color: transparent;\r\n    font-family: 'Poppins', sans-serif !important;\r\n\r\n    &:hover:not(.disabled) {\r\n        cursor: pointer;\r\n        color: red;\r\n    }\r\n`;\r\n\r\nexport const NavBarStyled = styled.div`\r\n    padding: 10px;\r\n    height: 130px;\r\n    background-color: #9ea9ed;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    .slider-wrapper {\r\n        width: 300px;\r\n    }\r\n\r\n    .slider-wrapper div {\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .slider-wrapper div p {\r\n        text-align: left;\r\n        width: 300px;\r\n        font-family: 'Poppins', sans-serif !important;\r\n    }\r\n\r\n    .MuiSlider-trackInverted {\r\n        transform: rotate(0deg) scaleX(-1) !important;\r\n    }\r\n\r\n    h1 {\r\n        margin: 10px;\r\n    }\r\n\r\n    h2 {\r\n        font-size: 2rem;\r\n        display: inline;\r\n        position: absolute;\r\n        top: 95px;\r\n        left: 5px;\r\n        z-index: 2;\r\n        transition: all 1s;\r\n    }\r\n\r\n    ul button {\r\n        border: none;\r\n        font-size: 15px;\r\n        background-color: transparent;\r\n        font-family: 'Poppins', sans-serif !important;\r\n    }\r\n\r\n    ul button:hover:not(.disabled) {\r\n        cursor: pointer;\r\n        color: red;\r\n    }\r\n`;\r\n\r\nexport const Ul = styled.ul<NavPropsSchema> `\r\n  button {\r\n    border: none;\r\n    font-size: 15px;\r\n    background-color: transparent;\r\n    font-family: \"Poppins\", sans-serif !important;\r\n  }\r\n\r\n  button:hover:not(.disabled) {\r\n    cursor: pointer;\r\n    color: red;\r\n  }\r\n\r\n  @media (max-width: 980px) {\r\n    z-index: 10;\r\n    list-style: none;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    background-color: #0d2538;\r\n    position: fixed;\r\n    transform: ${({ open }: NavPropsSchema) => (open ? \"translateX(0)\" : \"translateX(100%)\")};\r\n    top: -18px;\r\n    right: 0;\r\n    height: 100vh;\r\n    width: 200px;\r\n    padding: 3.5rem;\r\n    transition: transform 0.3s ease-in-out;\r\n    align-items: center;\r\n\r\n    h1 {\r\n      color: #fff;\r\n    }\r\n\r\n    button {\r\n      z-index: 30;\r\n      color: #fff;\r\n      padding: 10px 10px;\r\n    }\r\n\r\n    button.off {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media (max-height: 400px) {\r\n    padding: 1rem;\r\n\r\n    button {\r\n      padding: 5px 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FooterStyled = styled.div`\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100vw;\r\n\r\n    div {\r\n        flex: 1;\r\n        padding: 10px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n    }\r\n\r\n    div p,\r\n    div a {\r\n        padding-left: 10px;\r\n    }\r\n\r\n    div a {\r\n        font-size: 2rem;\r\n        color: #333;\r\n    }\r\n\r\n    div a:hover {\r\n        color: #000;\r\n    }\r\n\r\n    @media (max-width: 700px) {\r\n        div {\r\n            font-size: 10px;\r\n            padding: 0px;\r\n        }\r\n\r\n        div a {\r\n            font-size: 1.5rem;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const VisualizerStyled = styled.div`\r\n    .array-container {\r\n        transform: rotate(180deg) scaleX(-1);\r\n        position: relative;\r\n        top: -7px;\r\n    }\r\n\r\n    .array-bar {\r\n        background-color: #b08ffc;\r\n        display: inline-block;\r\n        margin: 0 1px;\r\n        transform: rotate(180deg) scaleX(-1);\r\n    }\r\n\r\n    .option {\r\n        position: absolute;\r\n        bottom: 10px;\r\n    }\r\n`;","import React from 'react';\r\nimport { NavPropsSchema } from '../utils/types';\r\nimport { Ul } from './styles';\r\n\r\nexport const NavItems: React.FC<NavPropsSchema> = ({ open, handleChange }: NavPropsSchema) => {\r\n    return (\r\n        <Ul className=\"menu\" open={open}>\r\n            <div className=\"menu\">\r\n                <h1 className=\"menu\">Sorting Visualizer</h1>\r\n            </div>\r\n            <button className=\"menu\" onClick={() => handleChange('b')}>\r\n                Bubble Sort\r\n            </button>\r\n            <button className=\"menu\" onClick={() => handleChange('i')}>\r\n                Insertion Sort\r\n            </button>\r\n            <button className=\"menu\" onClick={() => handleChange('s')}>\r\n                Selection Sort\r\n            </button>\r\n            <button className=\"menu\" onClick={() => handleChange('q')}>\r\n                Quick Sort\r\n            </button>\r\n            <button className=\"menu\" onClick={() => handleChange('m')}>\r\n                Merge Sort\r\n            </button>\r\n            <button className=\"menu\" onClick={() => handleChange('h')}>\r\n                Heap Sort\r\n            </button>\r\n        </Ul>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NavItems } from './NavItems';\r\nimport { BurgerSchema } from '../utils/types';\r\nimport { StyledBurger } from './styles';\r\n\r\nexport const Burger: React.FC<BurgerSchema> = ({ handleChange }: BurgerSchema) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', (e) => clickListener(e));\r\n\r\n        return () => {\r\n            document.removeEventListener('click', (e) => clickListener(e));\r\n        };\r\n    }, []);\r\n\r\n    const clickListener = (e): void => {\r\n        if (!e.target.classList.contains('menu')) {\r\n            setOpen((open) => (open ? !open : open));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledBurger className=\"menu\" open={open} onClick={() => setOpen(!open)}>\r\n                <div className=\"menu\" />\r\n                <div className=\"menu\" />\r\n                <div className=\"menu\" />\r\n            </StyledBurger>\r\n            <NavItems open={open} handleChange={handleChange} />\r\n        </>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Burger } from './Burger';\r\nimport { NavBarSchema } from '../utils/types';\r\nimport { Button, NavBarStyled } from './styles';\r\n\r\nimport './styles';\r\n\r\nexport const NavBar: React.FC<NavBarSchema> = (props: NavBarSchema) => {\r\n    const [algorithm, setAlgorithm] = useState('Bubble Sort');\r\n\r\n    const handleChange = (key: string): void => {\r\n        switch (key) {\r\n            case 'b':\r\n                setAlgorithm('Bubble Sort');\r\n                break;\r\n            case 'i':\r\n                setAlgorithm('Insertion Sort');\r\n                break;\r\n            case 's':\r\n                setAlgorithm('Selection Sort');\r\n                break;\r\n            case 'q':\r\n                setAlgorithm('Quick Sort');\r\n                break;\r\n            case 'm':\r\n                setAlgorithm('Merge Sort');\r\n                break;\r\n            case 'h':\r\n                setAlgorithm('Heap Sort');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <NavBarStyled>\r\n            <div className=\"slider-wrapper\">\r\n                <div className=\"number-slider\">\r\n                    <Typography id=\"number\" gutterBottom>\r\n                        Data Points\r\n                    </Typography>\r\n                    <Slider\r\n                        value={props.numBlocks}\r\n                        aria-label=\"number\"\r\n                        onChange={(event, newValue) => props.handleNumChange(newValue)}\r\n                        disabled={props.running}\r\n                        min={5}\r\n                        max={props.max}\r\n                    />\r\n                </div>\r\n                <div className=\"speed-slider\">\r\n                    <Typography id=\"speed\" gutterBottom>\r\n                        Animation Speed\r\n                    </Typography>\r\n                    <Slider\r\n                        value={props.animationSpeed}\r\n                        aria-label=\"speed\"\r\n                        track=\"inverted\"\r\n                        scale={(x) => -x}\r\n                        onChange={(event, newValue) => props.handleSpeedChange(newValue)}\r\n                        disabled={props.running}\r\n                        min={0}\r\n                        max={199}\r\n                    />\r\n                </div>\r\n                <Button className=\"off\" onClick={() => props.resetArray()}>\r\n                    New Array\r\n                </Button>\r\n                <Button\r\n                    onClick={() => props.sort(algorithm.charAt(0).toLowerCase())}\r\n                    className={props.running ? 'disabled off' : 'active off'}\r\n                    disabled={props.running}\r\n                >\r\n                    Sort Array\r\n                </Button>\r\n            </div>\r\n            <h2>{algorithm}</h2>\r\n\r\n            <Burger handleChange={handleChange} />\r\n        </NavBarStyled>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { FooterStyled } from './styles';\r\n\r\nexport const Footer: React.FC = () => {\r\n    return (\r\n        <FooterStyled>\r\n            <div>\r\n                <p>Made by Yousef Yassin</p>\r\n                <a href=\"https://github.com/Yyassin\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <FontAwesomeIcon icon={['fab', 'github']} />\r\n                </a>\r\n                <a href=\"https://linkedin.com/in/yousefy\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <FontAwesomeIcon icon={['fab', 'linkedin']} />\r\n                </a>\r\n            </div>\r\n        </FooterStyled>\r\n    );\r\n};\r\n","export const swap = (arr: number[], a: number, b: number) : void => {\r\n    [arr[a], arr[b]] = [arr[b], arr[a]];\r\n}\r\n\r\nexport const randomIntFromInterval = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min);","import { swap } from '../utils/algoUtils';\r\n\r\nexport const bubbleSortHelper = (arr: number[]) : number[] => {\r\n    const animations = [];\r\n    bubbleSort(arr, animations);\r\n    return animations;\r\n}\r\n\r\n/*\r\nIteratively sort array by swapping any pairs where the first \r\nadjacent element is larger than the second. Walk through the \r\narray until no swaps occur -> sorted.\r\n*/\r\nconst bubbleSort = (arr: number[], animations: any[]) : void => {\r\n    let sorted = false;\r\n    let round = 0;\r\n    let finalSorted: number;\r\n    const length = arr.length;\r\n\r\n    while (!sorted) {\r\n        sorted = true;\r\n        for (let i = 0; i < length - 1- round; i++) {\r\n            if (arr[i] > arr[i + 1]) {\r\n                animations.push([i, i + 1, true]);\r\n                i === arr.length - 2 - round ? animations.push([i, i + 1, 'f']) : animations.push([i, i + 1])\r\n                animations.push([i, arr[i + 1], i + 1, arr[i]]);\r\n                \r\n                sorted = false;\r\n                swap(arr, i, i + 1);\r\n            } else {\r\n                animations.push([i, i + 1, false]);\r\n\r\n                if (i === length - 2 - round) {\r\n                    animations.push([i, i + 1, 'f'])\r\n                    finalSorted = i + 1;\r\n                } else {\r\n                    animations.push([i, i + 1])\r\n                }\r\n                animations.push([i, arr[i], i + 1, arr[i + 1]])\r\n            }\r\n        }\r\n        round++;\r\n    }\r\n    for (let j = finalSorted; j >= 0; j--) {\r\n        animations.push([j, j, 'f'])\r\n        animations.push([j, j, 'f'])\r\n        animations.push([j, arr[j], j, arr[j]])\r\n    } \r\n}","export const insertionSortHelper = (arr: number[]): number[] => {\r\n    const animations = [];\r\n    insertionSort(arr, animations);\r\n    return animations;\r\n}\r\n\r\n/*\r\nSort array by walking through each element and inserting it\r\nin its place in the so-far sorted array behind it by shifting\r\nthe corresponding elements forward.\r\n*/\r\nconst insertionSort = (arr: number[], animations: any[]): void => {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const key = arr[i];\r\n        let j = i - 1;\r\n\r\n        //shift current index back until\r\n        //the index ahead of it is greater, hence in so-far sorted position.\r\n        while (j >= 0 && key < arr[j]) {\r\n            animations.push([j, i, false]);\r\n            animations.push([j, i]);\r\n            animations.push([j + 1, arr[j]]);\r\n            arr[j + 1] = arr[j--];\r\n        }\r\n\r\n        animations.push([i, i, true]);\r\n        animations.push([i, i]);\r\n        animations.push([j + 1, key]);\r\n        arr[j + 1] = key;\r\n    }\r\n}\r\n","import { swap } from \"../utils/algoUtils\";\r\n\r\nexport const selectionSortHelper = (arr: number[]): number[] => {\r\n    const animations = [];\r\n    selectionSort(arr, animations);\r\n    return animations;\r\n}\r\n\r\n/*\r\nSort the array by dividing it into two halves: left as sorted, right\r\nunsorted. Walk through the unsorted portion and repeatedly find the \r\nminimum element and add it to the next index in the sorted portion until\r\nfully sorted.\r\n*/\r\nconst selectionSort = (arr, animations) => {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let min = i;\r\n        let j;\r\n        for (j = i + 1; j < arr.length; j++) {\r\n            if (arr[j] < arr[min]) {\r\n                animations.push([min, j, true])\r\n                animations.push([min, j])\r\n                min = j;\r\n            } else {\r\n                animations.push([min, j, false])\r\n                animations.push([min, j])\r\n            }\r\n        }\r\n        \r\n        if (min !== i) {\r\n            animations.push([i, arr[min], min, arr[i]]);\r\n            animations.push([i, min])\r\n            swap(arr, i, min);\r\n        } else {\r\n            animations.push([i, arr[i], min, arr[min]]);\r\n            animations.push([min, i])\r\n        }\r\n\r\n        animations.push([i, i])\r\n        animations.push([i, i, 'f'])\r\n    }\r\n}","import { swap } from \"../utils/algoUtils\";\r\n\r\nexport const quickSortHelper = (arr: number[]) : number[] => {\r\n    const animations = [];\r\n    quickSort(arr, 0, arr.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\n/*\r\nConsider final index in segment as pivot. Partition the segment\r\naround this pivot, swapping elements and returning the index\r\nsuch that the partitioned element is in its sorted position: i.e \r\ngreater than all left indices and less than all right indices.\r\n*/\r\nconst partition = (arr: number[], low: number, high: number, animations: any[]): number => {\r\n    const pivotVal = arr[high];\r\n    let pivotIdx = low;\r\n    \r\n    //Pivot index always points to sorted position so far.\r\n    //If i < pivot value, then we increment the pivot index and swap i \r\n    //with the index's former value since it may be larger (if not equal).\r\n    for (let i = low; i < high; i++) {\r\n        if (arr[i] < pivotVal) {\r\n            animations.push([i, high, true])\r\n            animations.push([i, high])\r\n\r\n            animations.push([i, arr[pivotIdx], pivotIdx, arr[i]]);\r\n\r\n            [arr[i], arr[pivotIdx]] = [arr[pivotIdx], arr[i]];\r\n            pivotIdx++;\r\n            \r\n        } else {\r\n            animations.push([i, high, false])\r\n            animations.push([i, high])\r\n\r\n            animations.push([i, arr[i], pivotIdx, arr[pivotIdx]]);\r\n        }\r\n    }    \r\n\r\n    //Move the pivot in its sorted position.\r\n    animations.push([pivotIdx, pivotIdx, 'f'])\r\n    animations.push([pivotIdx, arr[high], high, arr[pivotIdx]]);\r\n\r\n    swap(arr, pivotIdx, high);\r\n    return pivotIdx;\r\n}\r\n\r\n/*\r\nRecursively sort array by choosing pivot and placing it in its sorted position.\r\nCall quicksort on the resulting two sub-arrays.\r\n*/\r\nconst quickSort = (arr: number[], low: number, high: number, animations: any[]): void => {\r\n    if (low >= high) {\r\n        return;\r\n    }\r\n\r\n        const pivot = partition(arr, low, high, animations);\r\n        quickSort(arr, low, pivot - 1, animations);\r\n        quickSort(arr, pivot + 1, high, animations);\r\n}\r\n\r\n\r\n","export const mergeSortHelper = (arr: number[]): number[] => {\r\n    const aux = [...arr];\r\n    const animations = [];\r\n    mergeSort(arr, aux, 0, arr.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\n/*\r\nMerge implementation using auxiliary array to maintain indices.\r\nMerges array1: low->mid, array2: mid+1->high.\r\nStore merge results in auxiliary array then copy to original array.\r\n*/\r\nconst merge = (arr: number[], aux: number[], low: number, \r\n    mid: number, high: number, animations: any[]): void => {\r\n    let k = low, \r\n        i = low,\r\n        j = mid + 1;\r\n\r\n    const finalMerge = 2 * (j - k) >= arr.length;\r\n\r\n        //Merge the two halves, storing results in auxiliary.\r\n        while (i <= mid && j <= high) {\r\n            animations.push([i, j])\r\n            finalMerge ? animations.push([i, j, 'f']) : animations.push([i, j])\r\n    \r\n            if (arr[i] <= arr[j]) {\r\n                animations.push([k, arr[i]]);\r\n                aux[k++] = arr[i++];\r\n            } else {\r\n                animations.push([k, arr[j]]);\r\n                aux[k++] = arr[j++];\r\n            }\r\n        }\r\n     \r\n        //Complete merging first half incase the second completes\r\n        //first. Second is already in place if first half completes\r\n        //first.\r\n        while(i <= mid) {\r\n            animations.push([k, i])\r\n            animations.push([k, i])\r\n            animations.push([k, arr[i]])\r\n            aux[k++] = arr[i++];\r\n        }\r\n\r\n        //Copy merge result back into original array.\r\n        for (let i = low; i <= high; i++) {\r\n            arr[i] = aux[i];\r\n        }\r\n}\r\n\r\n/*\r\nRecursively sort array by halving until reaching until cells. \r\nMerge and sort 'adjacent' unit cells to rebuild the sorted array.\r\n*/\r\nconst mergeSort = (arr: number[], aux: number[], low: number,\r\n    high: number, animations: any[]): void => {\r\n    if (low >= high) {\r\n        return;\r\n    }\r\n\r\n    const mid = Math.floor( low + (high - low) / 2);\r\n\r\n    //Merge sort on lower and upper halves.\r\n    mergeSort(arr, aux, low, mid, animations);\r\n    mergeSort(arr, aux, mid + 1, high, animations);\r\n\r\n    //Merge the result\r\n    merge(arr, aux, low, mid, high, animations);\r\n}","import { swap } from '../utils/algoUtils';\r\n\r\nexport const heapSortHelper = (arr: number[]) : number[] => {\r\n    const animations = [];\r\n    heapSort(arr, animations);\r\n    return animations;\r\n}\r\n\r\n/* \r\nRecursive method to insert nodes into max heap\r\narr: array, \r\nn: total nodes, \r\ni: current node being considered as max (root)\r\nanimations: animations array\r\n*/\r\nconst heapify = (arr: number[], n: number, i: number, animations: any[]): void => {\r\n    /*\r\n    For a zero-indexed array rep. of max heap:\r\n    parent @ Math.floor((i - 1) / 2)\r\n    left child @ 2i + 1\r\n    right child @ 2i + 2\r\n    */\r\n\r\n    let largest = i;\r\n    const left = 2 * i + 1,\r\n    right = 2 * i + 2;\r\n\r\n    //left child was larger\r\n    if (left < n && arr[left] > arr[largest]) {\r\n        animations.push([left, largest, true])\r\n        animations.push([left, largest])\r\n        largest = left;\r\n    }\r\n\r\n    //right child was larger\r\n    if (right < n && arr[right] > arr[largest]) {\r\n        animations.push([right, largest, true])\r\n        animations.push([right, largest])\r\n        largest = right;\r\n    }\r\n\r\n    //if swapped, recursively call heapify on child node\r\n    if (largest !== i) {\r\n        animations.push([i, largest, false])\r\n        animations.push([i, largest])\r\n        animations.push([i, arr[largest], largest, arr[i]])\r\n        animations.push([i, largest])\r\n        swap(arr, i, largest);\r\n        heapify(arr, n, largest, animations)\r\n    }\r\n}\r\n\r\n/*\r\nRecursively sort array by extracting max heap root.\r\nStore it at the end of the array and heapify the remaining array, repeat.\r\n*/\r\nconst heapSort = (arr: number[], animations: any[]): void => {\r\n    //rearrange array into heap structure\r\n    const start = Math.floor(arr.length / 2) - 1;\r\n\r\n    for (let i = start; i >= 0; i--) {\r\n        heapify(arr, arr.length, i, animations)\r\n    }\r\n\r\n    //extract n roots, and heapify new root (former last index)\r\n    for (let i = arr.length - 1; i >= 0; i-- ) {\r\n        animations.push([0, arr[i], i, arr[0]])\r\n        animations.push([0, i, true])\r\n        const temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp\r\n        heapify(arr, i, 0, animations); // size is one less as we remove nodes\r\n    }\r\n}\r\n\r\n","import { bubbleSortHelper } from '../algorithms/bubbleSort';\r\nimport { insertionSortHelper } from '../algorithms/insertionSort';\r\nimport { selectionSortHelper } from '../algorithms/selectionSort';\r\nimport { quickSortHelper } from '../algorithms/quickSort';\r\nimport { mergeSortHelper } from '../algorithms/mergeSort';\r\nimport { heapSortHelper } from '../algorithms/heapSort';\r\n\r\nexport const animationsHelper = (key: string, array: number[]): any[] => {\r\n    switch (key) {\r\n        case 'b':\r\n            return bubbleSortHelper(array);\r\n        case 'i':\r\n            return insertionSortHelper(array);\r\n        case 's':\r\n            return selectionSortHelper(array);\r\n        case 'q':\r\n            return quickSortHelper(array);\r\n        case 'm':\r\n            return mergeSortHelper(array);\r\n        case 'h':\r\n            return heapSortHelper(array);\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport const colorChangeHelper = (key: string, animations: any[], i: number): boolean => {\r\n    if (['b', 'm', 'i'].includes(key)) {\r\n        return i % 3 !== 2;\r\n    } else {\r\n        return animations[i].length < 4;\r\n    }\r\n};\r\n\r\nexport const colorHelper = (key: string, animations: any[], i: number): string[] => {\r\n    let color = '#b08ffc',\r\n        color2 = null;\r\n\r\n    if (['b', 'm', 'i'].includes(key)) {\r\n        if (i % 3 === 0) {\r\n            if (animations[i][2]) {\r\n                key === 'm' ? (color = '#6A75AE') : (color = 'red');\r\n            } else {\r\n                color = 'green';\r\n            }\r\n        } else if (animations[i][2] === 'f' && key != 'i') {\r\n            color2 = '#6A75AE';\r\n        }\r\n    } else if (['h', 's'].includes(key)) {\r\n        if (i % 2 === 0) {\r\n            if (animations[i][2]) {\r\n                color = 'red';\r\n            } else {\r\n                color = 'green';\r\n            }\r\n        } else if (animations[i][2]) {\r\n            color = '#6A75AE';\r\n        }\r\n    } else {\r\n        //quicksort\r\n        if (animations[i].length === 3) {\r\n            if (animations[i][2] === 'f') {\r\n                color2 = '#6A75AE';\r\n            } else if (animations[i][2]) {\r\n                color = 'red';\r\n            } else {\r\n                color = 'green';\r\n            }\r\n        }\r\n    }\r\n\r\n    return [color, color2];\r\n};","import React, { ReactElement } from 'react';\r\nimport { isMobile, isTablet } from 'react-device-detect';\r\nimport { NavBar } from './NavBar';\r\nimport { SortingVisualizerSchema } from '../utils/types';\r\nimport { Footer } from './Footer';\r\nimport { VisualizerStyled } from './styles';\r\n\r\nimport { randomIntFromInterval } from '../utils/algoUtils';\r\nimport { animationsHelper, colorChangeHelper, colorHelper } from '../utils/animationUtils';\r\n\r\nexport default class SortingVisualizer extends React.Component<unknown, SortingVisualizerSchema> {\r\n    constructor(props: SortingVisualizerSchema) {\r\n        super(props);\r\n\r\n        this.handleNumChange = this.handleNumChange.bind(this);\r\n        this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n        this.sort = this.sort.bind(this);\r\n\r\n        this.state = {\r\n            array: [],\r\n            numBlocks: isMobile ? 30 : 35,\r\n            animationSpeed: 10,\r\n            running: false,\r\n            max: isMobile ? 40 : window.innerWidth < 600 ? 35 : 200,\r\n        };\r\n    }\r\n\r\n    componentDidMount = (): void => {\r\n        this.resetArray();\r\n    };\r\n\r\n    clearAllTimeouts = (windowObject: Window & typeof globalThis): void => {\r\n        let id = windowObject.setTimeout(null, 1);\r\n\r\n        while (id--) {\r\n            windowObject.clearTimeout(id);\r\n        }\r\n    };\r\n\r\n    resetArray = (key?: boolean): void => {\r\n        const array = [];\r\n        const height = isMobile && !isTablet ? 130 : 500;\r\n\r\n        for (let i = 0; i < this.state.numBlocks; i++) {\r\n            array.push(randomIntFromInterval(5, height));\r\n        }\r\n\r\n        this.setState({ array });\r\n        this.clearAllTimeouts(window);\r\n\r\n        if (key) {\r\n            this.reset();\r\n        }\r\n    };\r\n\r\n    sorted = (): void => {\r\n        const arrayBars = document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>;\r\n        const ANIMATION_SPEED = 5;\r\n        const delay =\r\n            ((((this.state.numBlocks - 1) * this.state.numBlocks) / 2 - 1) * ANIMATION_SPEED) /\r\n            (2 * this.state.numBlocks);\r\n\r\n        for (let i = 0; i < this.state.numBlocks; i++) {\r\n            const barStyle = arrayBars[i].style;\r\n            setTimeout(() => {\r\n                barStyle.backgroundColor = 'green';\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = '#b08ffc';\r\n                }, delay + i * ANIMATION_SPEED);\r\n            }, i * ANIMATION_SPEED);\r\n        }\r\n\r\n        this.setState({ running: false });\r\n    };\r\n\r\n    reset = (): void => {\r\n        const arrayBars = document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>;\r\n        const ANIMATION_SPEED = 5;\r\n        const delay =\r\n            ((((this.state.numBlocks - 1) * this.state.numBlocks) / 2 - 1) * ANIMATION_SPEED) /\r\n            (2 * this.state.numBlocks);\r\n\r\n        for (let i = 0; i < this.state.numBlocks; i++) {\r\n            const barStyle = arrayBars[i].style;\r\n            setTimeout(() => {\r\n                barStyle.backgroundColor = '#e1d4ff';\r\n                setTimeout(() => {\r\n                    barStyle.backgroundColor = '#b08ffc';\r\n                }, delay + i * ANIMATION_SPEED);\r\n            }, i * ANIMATION_SPEED);\r\n        }\r\n\r\n        this.setState({ running: false });\r\n    };\r\n\r\n    asyncResetColor = (): void => {\r\n        const arrayBars = document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>;\r\n        for (let i = 0; i < this.state.numBlocks; i++) {\r\n            const barStyle = arrayBars[i].style;\r\n            barStyle.backgroundColor = '#b08ffc';\r\n        }\r\n    };\r\n\r\n    handleNumChange = (newValue: number): void => {\r\n        if (newValue !== this.state.numBlocks) {\r\n            this.setState({ numBlocks: newValue });\r\n            this.resetArray();\r\n            this.asyncResetColor();\r\n        }\r\n    };\r\n\r\n    handleSpeedChange = (newValue: number): void => {\r\n        newValue = 200 - newValue;\r\n        if (newValue !== this.state.animationSpeed) {\r\n            this.setState({ animationSpeed: newValue });\r\n            this.asyncResetColor();\r\n        }\r\n    };\r\n\r\n    sort = (key: string): void => {\r\n        this.setState({ running: true }, () => this.sortAnim(key));\r\n    };\r\n\r\n    sortAnim = (key: string): void => {\r\n        const animations = animationsHelper(key, this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar') as HTMLCollectionOf<HTMLElement>;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = colorChangeHelper(key, animations, i);\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = (animations[i] as unknown) as [number, number];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                const [color, color2] = colorHelper(key, animations, i);\r\n\r\n                setTimeout(() => {\r\n                    key === 'm'\r\n                        ? (barOneStyle.backgroundColor = color2 || color)\r\n                        : (barOneStyle.backgroundColor = color);\r\n                    barTwoStyle.backgroundColor = color2 || color;\r\n                }, i * this.state.animationSpeed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    if (['m', 'i'].includes(key)) {\r\n                        const [barOneIdx, newHeight] = animations[i];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        barOneStyle.height = `${newHeight}px`;\r\n                    } else {\r\n                        const [barOneIdx, newHeight1, barTwoIdx, newHeight2] = animations[i];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        barOneStyle.height = `${newHeight1}px`;\r\n                        barTwoStyle.height = `${newHeight2}px`;\r\n                    }\r\n\r\n                    if (i === animations.length - 1) {\r\n                        this.sorted();\r\n                    }\r\n                }, i * this.state.animationSpeed);\r\n            }\r\n        }\r\n    };\r\n\r\n    render(): ReactElement {\r\n        const { array } = this.state;\r\n        const width = isMobile\r\n            ? 200 / this.state.numBlocks\r\n            : this.state.numBlocks > 30\r\n            ? 500 / this.state.numBlocks\r\n            : 500 / 30;\r\n\r\n        return (\r\n            <VisualizerStyled>\r\n                <NavBar\r\n                    resetArray={() => this.resetArray(true)}\r\n                    sort={this.sort}\r\n                    handleSpeedChange={this.handleSpeedChange}\r\n                    handleNumChange={this.handleNumChange}\r\n                    animationSpeed={this.state.animationSpeed}\r\n                    numBlocks={this.state.numBlocks}\r\n                    running={this.state.running}\r\n                    max={this.state.max}\r\n                />\r\n                <div className=\"array-container\">\r\n                    {array.map((value, index) => (\r\n                        <div className=\"array-bar\" key={index} style={{ height: `${value}px`, width: `${width}px` }} />\r\n                    ))}\r\n                </div>\r\n                <Footer />\r\n            </VisualizerStyled>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport SortingVisualizer from './components/SortingVisualizer';\nimport './App.css';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer />\n        </div>\n    );\n};\n\nlibrary.add(fab);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}